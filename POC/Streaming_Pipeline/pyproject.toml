[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "databricks-streaming-pipeline"
version = "0.1.0"
description = "Azure EventHub to Databricks streaming pipeline with DQX quality validation"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Walgreens RX Team", email = "your-team@walgreens.com"}
]
maintainers = [
    {name = "Walgreens RX Team", email = "your-team@walgreens.com"}
]
keywords = [
    "databricks",
    "streaming",
    "eventhub",
    "azure",
    "data-pipeline",
    "dqx",
    "data-quality"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Scientific/Engineering :: Information Analysis"
]
requires-python = ">=3.8"
dependencies = [
    "azure-eventhub>=5.11.0",
    "azure-core>=1.28.0", 
    "azure-identity>=1.14.0",
    "azure-storage-blob>=12.19.0",
    "backoff>=2.2.1",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "structlog>=23.1.0",
    "prometheus-client>=0.17.1"
]

[project.optional-dependencies]
dev = [
    "black>=23.7.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "isort>=5.12.0"
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-sugar>=0.9.7",
    "pytest-timeout>=2.1.0",
    "pytest-benchmark>=4.0.0",
    "coverage>=7.3.0",
    "faker>=19.6.0",
    "deepdiff>=6.5.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0"
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0"
]
all = [
    "databricks-streaming-pipeline[dev,test,docs]"
]

[project.urls]
Homepage = "https://github.com/walgreens-rx/databricks-streaming-pipeline"
Documentation = "https://github.com/walgreens-rx/databricks-streaming-pipeline/wiki"
Repository = "https://github.com/walgreens-rx/databricks-streaming-pipeline.git"
Issues = "https://github.com/walgreens-rx/databricks-streaming-pipeline/issues"
Changelog = "https://github.com/walgreens-rx/databricks-streaming-pipeline/blob/main/CHANGELOG.md"

[project.scripts]
streaming-pipeline = "streaming_pipeline.cli:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["streaming_pipeline*"]

[tool.setuptools.package-data]
streaming_pipeline = ["py.typed", "*.sql", "config/*.yaml"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | tests/venv
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["streaming_pipeline"]
known_third_party = ["azure", "pytest", "pydantic"]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "azure.*",
    "databricks.*",
    "pyspark.*"
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2
fail_under = 75

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config", 
    "--tb=short",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=75",
    "--junit-xml=test-results.xml"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, dependencies)",
    "performance: Performance tests",
    "critical: Critical priority functions (95% coverage)",
    "high: High priority functions (95% coverage)", 
    "medium: Medium priority functions (80% coverage)",
    "low: Low priority functions (60% coverage)",
    "databricks: Tests requiring Databricks environment",
    "eventhub: Tests requiring EventHub connectivity",
    "dqx: Tests for DQX quality framework",
    "slow: Tests that take a long time to run"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Flake8 linting
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "tests/venv",
    ".venv",
    ".pytest_cache"
]
per-file-ignores = [
    "__init__.py:F401"
]