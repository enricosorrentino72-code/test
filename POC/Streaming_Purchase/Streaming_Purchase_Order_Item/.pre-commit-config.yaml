# Pre-commit hooks configuration
# Ensures code quality standards are met before committing code

# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

default_language_version:
  python: python3.9

repos:
  # Standard pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: Trim trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of files
      - id: check-yaml
        name: Check YAML syntax
      - id: check-json
        name: Check JSON syntax
      - id: check-toml
        name: Check TOML syntax
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1000']
      - id: check-case-conflict
        name: Check for case conflicts
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-docstring-first
        name: Check docstring is first
      - id: check-executables-have-shebangs
        name: Check executables have shebangs
      - id: check-ast
        name: Check Python AST
      - id: debug-statements
        name: Check for debugger imports
      - id: fix-byte-order-marker
        name: Fix byte order marker
      - id: mixed-line-ending
        name: Fix mixed line endings
        args: ['--fix=lf']
      - id: requirements-txt-fixer
        name: Sort requirements.txt

  # Black - Code Formatter
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        name: Format code with Black
        language_version: python3.9
        args: ['--line-length=120', '--target-version=py39']

  # isort - Import Sorter
  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort imports with isort
        args: ['--profile=black', '--line-length=120']

  # Ruff - Fast Python Linter
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.13
    hooks:
      - id: ruff
        name: Lint with Ruff
        args: ['--fix', '--exit-non-zero-on-fix']
      - id: ruff-format
        name: Format with Ruff

  # MyPy - Type Checker
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: Type check with mypy
        additional_dependencies:
          - types-requests
          - types-PyYAML
          - pydantic
        args: ['--ignore-missing-imports', '--strict-optional']
        exclude: '^tests/'

  # Pylint - Python Linter
  - repo: https://github.com/PyCQA/pylint
    rev: v3.0.3
    hooks:
      - id: pylint
        name: Lint with Pylint
        args: ['--max-line-length=120', '--disable=C0111,C0103,R0903,R0801,W0212']
        exclude: '^tests/'

  # Bandit - Security Linter
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        name: Security check with Bandit
        args: ['-ll', '--skip=B101,B601']
        exclude: '^tests/'

  # Safety - Dependency Security Check
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.3
    hooks:
      - id: python-safety-dependencies-check
        name: Check dependencies with Safety

  # Interrogate - Documentation Coverage
  - repo: https://github.com/econchick/interrogate
    rev: 1.5.0
    hooks:
      - id: interrogate
        name: Check docstring coverage
        args: ['--fail-under=80', '--verbose']
        exclude: '^tests/'

  # Pydocstyle - Docstring Style Checker
  - repo: https://github.com/PyCQA/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: Check docstring style
        args: ['--convention=google']
        exclude: '^tests/'

  # Docformatter - Docstring Formatter
  - repo: https://github.com/PyCQA/docformatter
    rev: v1.7.5
    hooks:
      - id: docformatter
        name: Format docstrings
        args: ['--in-place', '--wrap-summaries=120', '--wrap-descriptions=120']

  # YAML Lint
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        name: Lint YAML files
        args: ['--strict']

  # Markdown Lint
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        name: Lint Markdown files
        args: ['--fix']

  # Detect Secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: '.*\.(lock|package-lock\.json)$'

  # Git Commit Message Linter
  - repo: https://github.com/jorisroovers/gitlint
    rev: v0.19.1
    hooks:
      - id: gitlint
        name: Lint git commit messages

  # Prettier - Multi-language Code Formatter
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: Format non-Python files
        types_or: [yaml, json, markdown, html, css, javascript]

  # Check for Python vulnerabilities
  - repo: https://github.com/twu/skjold
    rev: v0.6.1
    hooks:
      - id: skjold
        name: Check for Python vulnerabilities

  # Spell Checker
  - repo: https://github.com/codespell-project/codespell
    rev: v2.2.6
    hooks:
      - id: codespell
        name: Check spelling
        args: ['--skip=*.pyc,*.pyo,*.egg-info,__pycache__,.git,.tox,dist,build,*.egg']

  # License Header Check
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        name: Add license headers
        files: \.py$
        exclude: __pycache__|\.git|\.tox|dist|build|.*\.egg|tests
        args:
          - --license-filepath
          - LICENSE-header.txt
          - --comment-style
          - "#"

# Custom local hooks
  - repo: local
    hooks:
      # Run tests
      - id: pytest
        name: Run unit tests
        entry: pytest tests/unit -v --tb=short
        language: system
        pass_filenames: false
        always_run: true

      # Check test coverage
      - id: coverage
        name: Check test coverage
        entry: pytest --cov=class --cov-fail-under=80 --cov-report=term-missing
        language: system
        pass_filenames: false
        always_run: true

      # Check cyclomatic complexity
      - id: radon
        name: Check cyclomatic complexity
        entry: radon cc class -s -nb --total-average
        language: system
        pass_filenames: false
        always_run: true

      # Generate requirements
      - id: requirements
        name: Generate requirements.txt
        entry: pip freeze > requirements-frozen.txt
        language: system
        pass_filenames: false
        always_run: false

ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [pylint, mypy, pytest, coverage]  # These are too slow for pre-commit.ci
  submodules: false